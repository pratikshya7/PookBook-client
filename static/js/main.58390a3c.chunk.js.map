{"version":3,"sources":["components/Layout/NavBar/NavBar.js","components/Layout/SideBar/SideBar.js","components/RecipeBuilder/Recipe/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","SideBar","vertical","pills","value","Button","block","Recipe","props","recipe","setRecipe","useEffect","axios","get","then","res","data","Fragment","map","r","Card","CardBody","Row","Col","md","CardImg","style","height","top","width","src","imageUrl","alt","CardTitle","dishName","CardSubtitle","serves","prepTime","cookTime","float","app","Container","Form","Input","name","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.58390a3c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n} from 'reactstrap';\n\n\nconst NavBar = () => {\n    const [isOpen, setIsOpen] = useState(false);\n    const toggle = () => setIsOpen(!isOpen);\n\n    return(\n    <div>\n      <Navbar color=\"danger\" dark expand=\"md\">\n        <NavbarBrand href=\"/\">PookBook</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto pull-right\" navbar>\n            <NavItem>\n              <NavLink href=\"/\">Home</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/\">About Us</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/\">Contact Us</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport {\n    Nav,\n    Button,\n} from 'reactstrap';\n\nconst SideBar = () => {\n\n    return (\n        <Nav vertical pills>\n            <select>\n                <option value=\"\"> Select Cuisine Type</option>\n                <option> Nepali</option>\n                <option> Indian</option>\n                <option>Chinese</option>\n            </select>\n            <br/>\n            <select>\n                <option value=\"\"> Select Meal Type</option>\n                <option> Breakfast</option>\n                <option> Lunch</option>\n                <option>Dinner</option>\n                <option>Snacks</option>\n            </select>\n            <br/>\n            <select>\n                <option value=\"\"> Select Cooking Time</option>\n                <option> 30 minute</option>\n                <option> 1 hour</option>\n                <option>2 hours</option>\n                <option>2 plus hours</option>\n            </select>\n            <br/>\n            <Button block color=\"success\">ADD RECIPE</Button>\n     </Nav>\n    )\n}\n\nexport default SideBar;","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport {\n    Card,\n    CardBody,\n    CardImg,\n    CardSubtitle,\n    CardTitle,\n    Button,\n    Row,\n    Col\n} from 'reactstrap';\n\nconst Recipe = (props) => {\n    const [recipe, setRecipe] = useState([]);\n    \n    //fetching recipe from API\n    useEffect( () => {\n        axios.get(\"http://localhost:5000/getAllRecipe\")\n        .then( res => setRecipe(res.data));\n    },[])\n\n    return(\n        <React.Fragment>\n            {\n                recipe.map(r => \n                    <div>\n                        <Card className=\"text-left\">\n                            <CardBody>\n                                <Row>\n                                    <Col md=\"3\">\n                                        <CardImg style={{ height: '130px' }} top width=\"100%\" src={r.imageUrl} alt=\"Card image cap\" />\n                                    </Col>\n                                    <Col md=\"9\">\n                                        <CardTitle><h5>{r.dishName}</h5></CardTitle>\n                                        <CardSubtitle>\n                                            <i>Serves: {r.serves} | Prep Time: {r.prepTime} | Cooking Time: {r.cookTime}</i>\n                                        </CardSubtitle>\n                                        <br/>\n                                        <Button className=\"btn btn-sm\" color=\"info\" style={{float:'right'}}>Click to View Recipe</Button>\n                                    </Col>\n                                </Row>\n                            </CardBody>\n                        </Card>\n                        <br/>\n                    </div>\n\n                )\n            }\n            \n        </React.Fragment>\n    )\n}\n\nexport default Recipe;\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/Layout/NavBar/NavBar';\nimport { Row, \n        Col,\n        Form,\n        Input,\n        Container,\n      } from 'reactstrap';\n\nimport SideBar from './components/Layout/SideBar/SideBar';\nimport Recipe from './components/RecipeBuilder/Recipe/Recipe';\n\n\nconst app = () =>  {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Container>\n      <Row>\n      <Col md=\"8\">      \n      <h1> Find the recipe that best fits for you.</h1>\n      <Form>\n        <Input name=\"recipe\" placeholder=\"Search the recipe.\"/>\n      </Form>\n      <br/>\n      <Row>\n        <Col md=\"12\">\n          <Recipe/>\n        </Col>\n      </Row>\n      </Col>\n      <Col md=\"4\">\n        <br/>\n        <SideBar/>\n      </Col>\n      </Row>\n      <br/>\n      </Container>\n    </div>\n  );\n}\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}